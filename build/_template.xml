<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="Template">

  <!-- ```````````````````````````
    Environment Variables
  ``````````````````````````` -->

  <condition property="is.osx"><os family="mac" /></condition>

  <property name="myenv" value="cc" />
  <import file="_${myenv}.xml" />

  <property name="dist.dir"                     value="${basedir}/dist" />

  <property name="dist.umple.jar"               value="umple-${umple.version}.jar" />
  <property name="dist.umple.umplificator.jar"  value="umplificator-${umple.version}.jar" />
  <property name="dist.umple.validator.jar"     value="validator-${umple.version}.jar" />
  <property name="dist.umple.vml.jar"           value="vml-${umple.version}.jar" />
  <property name="dist.umple.stats.jar"         value="umplestats-${umple.version}.jar" />
  <property name="dist.umple.docs.jar"          value="umpledocs-${umple.version}.jar" />
  <property name="dist.umple.sync.jar"          value="umplesync-${umple.version}.jar" />
  <property name="dist.umple.run.jar"           value="umplerun-${umple.version}.jar" />

  <macrodef name="isreachable" >
    <attribute name="property" description="Property to hold result value" />
    <attribute name="host"     description="Host validated" />
    <sequential>
      <if>
        <os family="unix" />
        <then>
          <exec executable="ping" resultproperty="@{property}" output="/dev/null" logError="true" >
            <arg line="-c 1 -t ${connectionTimeout}" />
            <arg line="@{host}" />
          </exec>
        </then>
        <else>
          <echo message="Ping on windows is untested. Please fix this if you use this feature." />


          <!-- https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ping.mspx?mfr=true -->
          <if>
            <!-- Ping requires timeout in MS, use the math module. -->
            <not><isset property="connectionTimeout.milli" /></not>
            <then>
              <math result="connectionTimeout.milli" operand1="${connectionTimeout}" operation="*" operand2="1000" datatype="int"/>
              <echo>Connection timeout -> ${connectionTimeout.milli} ms</echo>
            </then>
          </if>

          <exec executable="PING" resultproperty="@{property}" output="NUL" logError="true" >
            <arg line="/w ${connectionTimeout.milli}" />
            <arg line="/n 1" />
            <arg line="@{host}" />
          </exec>
        </else>
      </if>
    </sequential> 
  </macrodef>

  <macrodef name="check-connectivity">
    <sequential>
      <if>
        <not><isset property="online" /></not>
        <then>
          <echo message="Checking for Internet connectivity..." />
          <echo message="Set property -Donline=false if connectivity is known to be unavailable." />
          
          <!-- 
            We ping three different sources that we know of to check if they are available. If they are not available
            then we know that the build is offline (as far as we are concerned).

            Unfortunately, the <isreachable> tag from <condition> seems to return false negatives, thus doing an OS 
            specific approach was required. This is handled in the custom <isreachable> macro defined above. 
          -->
          <parallel>
            <isreachable property="access.maven" 
                         host="repo1.maven.org" />
            <isreachable property="access.org.umple" 
                         host="try.umple.org" />
            <isreachable property="access.com.googlecode" 
                         host="umple.googlecode.com" />
          </parallel>

          <condition property="online">
            <and>
              <equals arg1="0" arg2="${access.maven}" />
              <equals arg1="0" arg2="${access.org.umple}" />
              <equals arg1="0" arg2="${access.com.googlecode}" />
            </and>
          </condition>
        </then>
      </if>

      <property name="online" value="false" />
      <echo message="Internet connectivity available: ${online}" />
    </sequential>
  </macrodef>

  <import file="build.deps.xml" />
  <deps-declare-taskdef />

  <!-- ```````````````````````````
    Clean up and initialize any potential byproduct
  ``````````````````````````` -->

  <target name="template.clean">
    <delete dir="cruise.umple.validator/bin" failonerror="false" />
    <delete dir="cruise.umplificator/bin" failonerror="false" />
    <delete dir="${bin.path}" failonerror="false" />
    <delete dir="${dist.path}" failonerror="false" />
    <touch file="${dist.dir}/.gitkeep"/>
  </target>

  <target name="template.init">
    <mkdir dir="cruise.umple.validator/bin"/>
    <mkdir dir="cruise.umplificator/bin"/>
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${dist.path}"/>
    <mkdir dir="${test.output.path}"/>
  </target>

  <target name="template.setVersion">
    <echo message="Setting Version: ${umple.version}" />
    <replace dir="cruise.umple/src-gen-jet/cruise" token="@UMPLE_VERSION@" value="${umple.version}">
      <include name="**/*.java"/>
    </replace>
    <replace file="cruise.umple/src/UmpleVersion.ump" token="@UMPLE_VERSION@" value="${umple.version}" />
    <replace file="cruise.umple/test/cruise/umple/UmpleConsoleMainTest.java" token="@UMPLE_VERSION@" value="${umple.version}" />
    <replace file="cruise.umple/test/cruise/umple/compiler/UmpleModelTest.java" token="@UMPLE_VERSION@" value="${umple.version}" />
    <!-- <replace file="cruise.umple/src-gen-umple/cruise/umple/compiler/UmpleModel.java" token="@UMPLE_VERSION@" value="${umple.version}" /> -->
    <replace file="cruise.umple.eclipse/META-INF/MANIFEST.MF" token="Bundle-Version: 0.0.1" value="Bundle-Version: ${umple.version}" />
    <replace file="cruise.umple.xtext.ui/META-INF/MANIFEST.MF" token="Bundle-Version: 0.0.1" value="Bundle-Version: ${umple.version}" />
  </target>

  <target name="template.resetVersion">
    <echo message="Resetting To Test Version: ${last.version} -> @UMPLE_VERSION@" />
    <replace file="cruise.umple/src-gen-umple/cruise/umple/compiler/UmpleModel.java" token="${last.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/src/UmpleVersion.ump" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/test/cruise/umple/UmpleConsoleMainTest.java" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/test/cruise/umple/compiler/UmpleModelTest.java" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple.eclipse/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />
    <replace file="cruise.umple.xtext.ui/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />

    <echo message="Resetting To Last Version: ${umple.version} -> $${last.version}" />
    <replace dir="cruise.umple/src-gen-umple/cruise" token="${umple.version}" value="$${last.version}"><include name="**/*.java"/></replace>
    <replace dir="cruise.umple/src-gen-jet/cruise" token="${umple.version}" value="$${last.version}">
      <include name="**/*.java"/>
    </replace>

    <!-- TODO: UNCOMMENT ONCE RSM IN THE MIX -->
    <!--
    <replace file="../cruise.umple.rsm/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />
    -->
  </target>

  <target name="template.localVersion">
    <replace dir="cruise.umple/src-gen-umple/cruise" token="${umple.version}" value="@UMPLE_VERSION@">
      <include name="**/*.java"/>
    </replace>
    <replace dir="cruise.umple/src-gen-jet/cruise" token="${umple.version}" value="@UMPLE_VERSION@">
      <include name="**/*.java"/>
    </replace>
  </target>

  <!-- ```````````````````````````
    Test the application
  ``````````````````````````` -->

  <target name="template.test">

    <deps-get-path conf="core" pathid="core.ivy.classpath" />
    <deps-get-path conf="test" pathid="test.ivy.classpath" />

    <junit fork="yes" forkmode="perBatch" haltonfailure="${haltonfailure}" showoutput="${showJunitOutput}" printsummary="${showJunitSummary}" >
      <!-- <jmvarg value="-XstartOnFirstThread"/> -->
      <formatter type="xml" unless="${showJunitOutput}"/>
      <formatter usefile="false" type="brief" if="${showJunitOutput}"/>
      <batchtest fork="yes" todir="${test.output.path}">
         <fileset dir="${project.path}/test">
          <include name="**/${junit}.java"/>
          <exclude name="**/AllTests.java"/>
        </fileset>
      </batchtest>
      <classpath refid="project.classpath"/>
      <classpath refid="core.ivy.classpath"/>
      <classpath refid="test.ivy.classpath"/>
    </junit>

    <junitreport todir="${test.output.path}">
      <fileset dir="${test.output.path}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.output.path}"/>
    </junitreport>
  </target>


</project>
